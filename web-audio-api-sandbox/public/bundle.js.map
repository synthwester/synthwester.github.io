{
  "version": 3,
  "sources": ["../src/oscillator/oscillator.audio.ts", "../src/oscillator/oscillator.ui.ts", "../src/oscillator/oscillator.main.ts", "../src/index.ts"],
  "sourcesContent": ["export class OscillatorAudio {\r\n  private audioContext: AudioContext;\r\n  private frequency: number;\r\n  private gain: number;\r\n  private type: OscillatorType;\r\n  private oscillatorNode: OscillatorNode;\r\n  private oscillatorGainNode: GainNode;\r\n  private modulationGainNode: GainNode;\r\n\r\n  constructor({\r\n    audioContext,\r\n    frequency,\r\n    gain,\r\n    type,\r\n  }: {\r\n    audioContext: AudioContext;\r\n    frequency: number;\r\n    gain: number;\r\n    type: OscillatorType;\r\n  }) {\r\n    this.audioContext = audioContext;\r\n    this.frequency = frequency;\r\n    this.gain = gain;\r\n    this.type = type;\r\n\r\n    this.oscillatorNode = new OscillatorNode(this.audioContext, {\r\n      frequency: this.frequency,\r\n      type: this.type,\r\n    });\r\n\r\n    this.oscillatorGainNode = new GainNode(this.audioContext, { gain: this.gain });\r\n    this.modulationGainNode = new GainNode(this.audioContext, { gain: this.gain * 1000 });\r\n\r\n    this.oscillatorNode.connect(this.oscillatorGainNode);\r\n    this.oscillatorNode.connect(this.modulationGainNode);\r\n  }\r\n\r\n  start() {\r\n    this.oscillatorNode.start();\r\n  }\r\n\r\n  stop() {\r\n    this.oscillatorNode.stop();\r\n  }\r\n\r\n  setFrequency(frequency: number) {\r\n    this.frequency = frequency;\r\n    this.oscillatorNode.frequency.setValueAtTime(frequency, this.audioContext.currentTime);\r\n  }\r\n\r\n  setAudioGain(gain: number) {\r\n    this.gain = gain;\r\n    this.oscillatorGainNode.gain.setValueAtTime(gain, this.audioContext.currentTime);\r\n  }\r\n\r\n  setModulationGain(gain: number) {\r\n    this.gain = gain;\r\n    this.modulationGainNode.gain.setValueAtTime(this.gain * 1000, this.audioContext.currentTime);\r\n  }\r\n\r\n  setType(type: OscillatorType) {\r\n    this.type = type;\r\n    this.oscillatorNode.type = type;\r\n  }\r\n\r\n  getNodes() {\r\n    return {\r\n      oscillatorNode: this.oscillatorNode,\r\n      audioOutputNode: this.oscillatorGainNode,\r\n      modulationOutputNode: this.modulationGainNode,\r\n    };\r\n  }\r\n}\r\n", "interface OscillatorUIParameters {\r\n  name: string;\r\n}\r\n\r\n// export const oscillatorUi = document.createElement(\"div\");\r\n\r\nfunction oscillatorUI(params: OscillatorUIParameters) {\r\n  return `<fieldset class=\"rounded-lg border border-primary/30 dark:border-primary/50 p-6\">\r\n            <legend class=\"px-2 text-sm font-medium text-neutral-700 dark:text-neutral-300\">Oscillator</legend>\r\n            <div class=\"space-y-6\">\r\n              <div>\r\n                <label class=\"block text-sm font-medium text-neutral-700 dark:text-neutral-300\" for=\"${params.name}-frequency\"\r\n                  >Frequency (kHz)</label\r\n                >\r\n                <div class=\"mt-2 flex items-center gap-4\">\r\n                  <input\r\n                    class=\"h-2 w-full cursor-pointer appearance-none rounded-full bg-primary/20 dark:bg-primary/50 slider-thumb\"\r\n                    id=\"${params.name}-frequency\"\r\n                    max=\"10000\"\r\n                    min=\"20\"\r\n                    type=\"range\"\r\n                    value=\"500\"\r\n                  />\r\n                  <span id=\"${params.name}-frequency-label\" class=\"w-10 text-right text-sm font-medium text-neutral-900 dark:text-white\">500</span>\r\n                </div>\r\n              </div>\r\n              <div>\r\n                <label class=\"block text-sm font-medium text-neutral-700 dark:text-neutral-300\" for=\"${params.name}-gain\"\r\n                  >Gain</label\r\n                >\r\n                <div class=\"mt-2 flex items-center gap-4\">\r\n                  <input\r\n                    class=\"h-2 w-full cursor-pointer appearance-none rounded-full bg-primary/20 dark:bg-primary/50 slider-thumb\"\r\n                    id=\"${params.name}-gain\"\r\n                    max=\"1\"\r\n                    min=\"0\"\r\n                    type=\"range\"\r\n                    value=\"0.2\"\r\n                    step=\"0.01\"\r\n                  />\r\n                  <span id=\"${params.name}-gain-label\" class=\"w-10 text-right text-sm font-medium text-neutral-900 dark:text-white\">500</span>\r\n                </div>\r\n              </div>\r\n              <div>\r\n                <span class=\"block text-sm font-medium text-neutral-700 dark:text-neutral-300\">Type</span>\r\n                <div id=\"${params.name}-type\" class=\"mt-2 grid grid-cols-3 gap-2\">\r\n                  <label\r\n                    class=\"flex cursor-pointer items-center justify-center rounded border border-primary/30 bg-background-light px-4 py-2 text-center text-sm font-medium text-neutral-700 has-[:checked]:border-primary has-[:checked]:bg-primary has-[:checked]:text-white dark:border-primary/50 dark:bg-primary/30 dark:text-neutral-200 dark:has-[:checked]:border-primary dark:has-[:checked]:bg-primary dark:has-[:checked]:text-white\"\r\n                  >\r\n                    <input checked=\"\" class=\"sr-only\" name=\"${params.name}-type\" type=\"radio\" value=\"sine\" />\r\n                    <span>Sine</span>\r\n                  </label>\r\n                  <label\r\n                    class=\"flex cursor-pointer items-center justify-center rounded border border-primary/30 bg-background-light px-4 py-2 text-center text-sm font-medium text-neutral-700 has-[:checked]:border-primary has-[:checked]:bg-primary has-[:checked]:text-white dark:border-primary/50 dark:bg-primary/30 dark:text-neutral-200 dark:has-[:checked]:border-primary dark:has-[:checked]:bg-primary dark:has-[:checked]:text-white\"\r\n                  >\r\n                    <input class=\"sr-only\" name=\"${params.name}-type\" type=\"radio\" value=\"sawtooth\" />\r\n                    <span>Saw</span>\r\n                  </label>\r\n                  <label\r\n                    class=\"flex cursor-pointer items-center justify-center rounded border border-primary/30 bg-background-light px-4 py-2 text-center text-sm font-medium text-neutral-700 has-[:checked]:border-primary has-[:checked]:bg-primary has-[:checked]:text-white dark:border-primary/50 dark:bg-primary/30 dark:text-neutral-200 dark:has-[:checked]:border-primary dark:has-[:checked]:bg-primary dark:has-[:checked]:text-white\"\r\n                  >\r\n                    <input class=\"sr-only\" name=\"${params.name}-type\" type=\"radio\" value=\"square\" />\r\n                    <span>Square</span>\r\n                  </label>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </fieldset>`;\r\n}\r\n\r\nexport function createOscillatorUI(params: OscillatorUIParameters): HTMLDivElement {\r\n  const wrapper = document.createElement(\"div\");\r\n  wrapper.innerHTML = oscillatorUI(params);\r\n\r\n  return wrapper;\r\n}\r\n", "import { OscillatorAudio } from \"./oscillator.audio\";\r\nimport { createOscillatorUI } from \"./oscillator.ui\";\r\n\r\nexport function createOscillator(name: string, audioContext: AudioContext, contentContext: HTMLElement) {\r\n  contentContext.appendChild(createOscillatorUI({ name }));\r\n\r\n  const frequencyInput = document.getElementById(`${name}-frequency`) as HTMLInputElement;\r\n  if (!frequencyInput) {\r\n    throw new Error(\"Frequency input not found\");\r\n  }\r\n  const frequencyInputLabel = document.getElementById(`${name}-frequency-label`) as HTMLInputElement;\r\n  if (!frequencyInputLabel) {\r\n    throw new Error(\"Frequency input label not found\");\r\n  }\r\n  frequencyInputLabel.textContent = frequencyInput.value;\r\n\r\n  const gainInput = document.getElementById(`${name}-gain`) as HTMLInputElement;\r\n  if (!gainInput) {\r\n    throw new Error(\"Gain input not found\");\r\n  }\r\n  const gainInputLabel = document.getElementById(`${name}-gain-label`) as HTMLInputElement;\r\n  if (!gainInputLabel) {\r\n    throw new Error(\"Gain input label not found\");\r\n  }\r\n  gainInputLabel.textContent = gainInput.value;\r\n\r\n  const typeInput = document.getElementById(`${name}-type`) as HTMLDivElement;\r\n  if (!typeInput) {\r\n    throw new Error(\"Type input not found\");\r\n  }\r\n\r\n  const oscillatorAudio = new OscillatorAudio({\r\n    audioContext: audioContext,\r\n    frequency: frequencyInput.valueAsNumber,\r\n    gain: gainInput.valueAsNumber,\r\n    type: \"sine\",\r\n  });\r\n\r\n  oscillatorAudio.start();\r\n\r\n  frequencyInput.addEventListener(\"input\", () => {\r\n    oscillatorAudio.setFrequency(Number(frequencyInput.value));\r\n    frequencyInputLabel.textContent = frequencyInput.value;\r\n  });\r\n\r\n  gainInput.addEventListener(\"input\", () => {\r\n    oscillatorAudio.setAudioGain(Number(gainInput.value));\r\n    oscillatorAudio.setModulationGain(Number(gainInput.value));\r\n    gainInputLabel.textContent = gainInput.value;\r\n  });\r\n\r\n  typeInput.addEventListener(\"change\", (event) => {\r\n    oscillatorAudio.setType((event.target as HTMLInputElement).value as OscillatorType);\r\n  });\r\n\r\n  return oscillatorAudio;\r\n}\r\n", "import { createOscillator } from \"./oscillator/oscillator.main\";\r\n\r\nasync function main() {\r\n  const audioContext = new AudioContext();\r\n\r\n  const contentContext = document.getElementById(\"content\");\r\n  if (!contentContext) {\r\n    throw new Error(\"Content element not found\");\r\n  }\r\n\r\n  const osc1 = createOscillator(\"osc1\", audioContext, contentContext);\r\n  const osc2 = createOscillator(\"osc2\", audioContext, contentContext);\r\n\r\n  // osc1.getNodes().outputNode.connect(osc2.getNodes().oscillatorNode.frequency);\r\n\r\n  osc1.getNodes().modulationOutputNode.connect(osc2.getNodes().oscillatorNode.frequency);\r\n  osc2.getNodes().audioOutputNode.connect(audioContext.destination);\r\n\r\n  const buttonWrapper = document.createElement(\"div\");\r\n  buttonWrapper.innerHTML = `<button id=\"start-audio\" class=\"rounded bg-primary px-4 py-2 font-medium text-white hover:bg-primary/80\">Start Audio Context</button>`;\r\n  contentContext.appendChild(buttonWrapper);\r\n\r\n  buttonWrapper.addEventListener(\"click\", async () => {\r\n    console.log(\"Button clicked\");\r\n    if (audioContext.state === \"suspended\") {\r\n      await audioContext.resume();\r\n    } else if (audioContext.state === \"running\") {\r\n      await audioContext.suspend();\r\n    }\r\n  });\r\n}\r\n\r\nwindow.addEventListener(\"load\", () => {\r\n  console.log(\"Window loaded\");\r\n  main().catch((error) => {\r\n    console.error(\"Error in main:\", error);\r\n  });\r\n});\r\n"],
  "mappings": "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",
  "names": []
}
